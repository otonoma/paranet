{"allContent":{"docusaurus-plugin-content-docs":{"default":{"loadedVersions":[{"versionName":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","path":"/docs","tagsPath":"/docs/tags","editUrl":"https://github.com/otonoma/paranet/edit/main/docs/docs","editUrlLocalized":"https://github.com/otonoma/paranet/edit/main/docs/i18n/en/docusaurus-plugin-content-docs/current","isLast":true,"routePriority":-1,"sidebarFilePath":"/Users/mike/code/grokit/paranet/site/sidebars.js","contentPath":"/Users/mike/code/grokit/paranet/site/docs","contentPathLocalized":"/Users/mike/code/grokit/paranet/site/i18n/en/docusaurus-plugin-content-docs/current","docs":[{"id":"deployment/deployment","title":"Deployment & Operations","description":"","source":"@site/docs/deployment/index.md","sourceDirName":"deployment","slug":"/deployment/","permalink":"/docs/deployment/","draft":false,"unlisted":false,"editUrl":"https://github.com/otonoma/paranet/edit/main/docs/docs/deployment/index.md","tags":[],"version":"current","sidebarPosition":7,"frontMatter":{"id":"deployment","title":"Deployment & Operations","sidebar_position":7},"sidebar":"tutorialSidebar","previous":{"title":"Inbox","permalink":"/docs/paracord/inbox"}},{"id":"developer_tools/developer_tools","title":"Developer Guides & Tools","description":"Welcome to the Developer Tools section of the Paranet documentation! This section will cover the tools we offer Developers (and in some cases non-technical users).","source":"@site/docs/developer_tools/index.md","sourceDirName":"developer_tools","slug":"/developer_tools/","permalink":"/docs/developer_tools/","draft":false,"unlisted":false,"editUrl":"https://github.com/otonoma/paranet/edit/main/docs/docs/developer_tools/index.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"id":"developer_tools","title":"Developer Guides & Tools","sidebar_position":5},"sidebar":"tutorialSidebar","previous":{"title":"Hello World","permalink":"/docs/paraflow/examples/hello-world"},"next":{"title":"Para CLI","permalink":"/docs/developer_tools/para-cli"}},{"id":"developer_tools/integration_guides/integration-guides","title":"Integration Guides","description":"","source":"@site/docs/developer_tools/integration_guides/index.md","sourceDirName":"developer_tools/integration_guides","slug":"/developer_tools/integration_guides/","permalink":"/docs/developer_tools/integration_guides/","draft":false,"unlisted":false,"editUrl":"https://github.com/otonoma/paranet/edit/main/docs/docs/developer_tools/integration_guides/index.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"id":"integration-guides","title":"Integration Guides","sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"VSCode Extension","permalink":"/docs/developer_tools/vscode"},"next":{"title":"Nvidia's Omniverse & Isaac Sim","permalink":"/docs/developer_tools/integration_guides/omniverse"}},{"id":"developer_tools/integration_guides/omniverse","title":"Nvidia's Omniverse & Isaac Sim","description":"","source":"@site/docs/developer_tools/integration_guides/omniverse.md","sourceDirName":"developer_tools/integration_guides","slug":"/developer_tools/integration_guides/omniverse","permalink":"/docs/developer_tools/integration_guides/omniverse","draft":false,"unlisted":false,"editUrl":"https://github.com/otonoma/paranet/edit/main/docs/docs/developer_tools/integration_guides/omniverse.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"id":"omniverse","title":"Nvidia's Omniverse & Isaac Sim","draft":true,"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Integration Guides","permalink":"/docs/developer_tools/integration_guides/"},"next":{"title":"Paracord Client","permalink":"/docs/paracord/"}},{"id":"developer_tools/para-cli","title":"Para CLI","description":"The Paranet Cli allows for easy deployments of actors and paranets to local and cloud environments.","source":"@site/docs/developer_tools/para_cli.md","sourceDirName":"developer_tools","slug":"/developer_tools/para-cli","permalink":"/docs/developer_tools/para-cli","draft":false,"unlisted":false,"editUrl":"https://github.com/otonoma/paranet/edit/main/docs/docs/developer_tools/para_cli.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"id":"para-cli","title":"Para CLI","sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Developer Guides & Tools","permalink":"/docs/developer_tools/"},"next":{"title":"VSCode Extension","permalink":"/docs/developer_tools/vscode"}},{"id":"developer_tools/vscode","title":"VSCode Extension","description":"The paranet extension makes it easy to view, edit and deploy resources on the paranet.","source":"@site/docs/developer_tools/vscode.md","sourceDirName":"developer_tools","slug":"/developer_tools/vscode","permalink":"/docs/developer_tools/vscode","draft":false,"unlisted":false,"editUrl":"https://github.com/otonoma/paranet/edit/main/docs/docs/developer_tools/vscode.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"id":"vscode","title":"VSCode Extension","draft":true,"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Para CLI","permalink":"/docs/developer_tools/para-cli"},"next":{"title":"Integration Guides","permalink":"/docs/developer_tools/integration_guides/"}},{"id":"getting-started","title":"Getting Started","description":"Welcome to the Getting Started guide for the Paranet! This guide will walk you through the setup process, introduce you to the tools youâ€™ll need, and help you deploy your first Paranet.","source":"@site/docs/getting_started.md","sourceDirName":".","slug":"/getting-started","permalink":"/docs/getting-started","draft":false,"unlisted":false,"editUrl":"https://github.com/otonoma/paranet/edit/main/docs/docs/getting_started.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"id":"getting-started","title":"Getting Started","sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Introduction","permalink":"/docs/"},"next":{"title":"Paranet Concepts","permalink":"/docs/paranet_concepts/"}},{"id":"introduction","title":"Introduction","description":"Welcome to the Paranet documentation!","source":"@site/docs/index.md","sourceDirName":".","slug":"/","permalink":"/docs/","draft":false,"unlisted":false,"editUrl":"https://github.com/otonoma/paranet/edit/main/docs/docs/index.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"id":"introduction","title":"Introduction","sidebar_position":1},"sidebar":"tutorialSidebar","next":{"title":"Getting Started","permalink":"/docs/getting-started"}},{"id":"paracord/cards","title":"Adaptive Cards","description":"What's an Adpative Card?","source":"@site/docs/paracord/cards.md","sourceDirName":"paracord","slug":"/paracord/cards","permalink":"/docs/paracord/cards","draft":false,"unlisted":false,"editUrl":"https://github.com/otonoma/paranet/edit/main/docs/docs/paracord/cards.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"id":"cards","title":"Adaptive Cards","draft":true,"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Views","permalink":"/docs/paracord/views"},"next":{"title":"Panels","permalink":"/docs/paracord/panels"}},{"id":"paracord/inbox","title":"Inbox","description":"What's the Inbox?","source":"@site/docs/paracord/inbox.md","sourceDirName":"paracord","slug":"/paracord/inbox","permalink":"/docs/paracord/inbox","draft":false,"unlisted":false,"editUrl":"https://github.com/otonoma/paranet/edit/main/docs/docs/paracord/inbox.md","tags":[],"version":"current","sidebarPosition":9,"frontMatter":{"id":"inbox","title":"Inbox","draft":true,"sidebar_position":9},"sidebar":"tutorialSidebar","previous":{"title":"Ledger","permalink":"/docs/paracord/ledger"},"next":{"title":"Deployment & Operations","permalink":"/docs/deployment/"}},{"id":"paracord/ledger","title":"Ledger","description":"Ledger is place to explore the Paranet actors conversations.","source":"@site/docs/paracord/ledger.md","sourceDirName":"paracord","slug":"/paracord/ledger","permalink":"/docs/paracord/ledger","draft":false,"unlisted":false,"editUrl":"https://github.com/otonoma/paranet/edit/main/docs/docs/paracord/ledger.md","tags":[],"version":"current","sidebarPosition":7,"frontMatter":{"id":"ledger","title":"Ledger","sidebar_position":7},"sidebar":"tutorialSidebar","previous":{"title":"ORA","permalink":"/docs/paracord/ora"},"next":{"title":"Inbox","permalink":"/docs/paracord/inbox"}},{"id":"paracord/ora","title":"ORA","description":"What's an ORA?","source":"@site/docs/paracord/ora.md","sourceDirName":"paracord","slug":"/paracord/ora","permalink":"/docs/paracord/ora","draft":false,"unlisted":false,"editUrl":"https://github.com/otonoma/paranet/edit/main/docs/docs/paracord/ora.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"id":"ora","title":"ORA","draft":true,"sidebar_position":5},"sidebar":"tutorialSidebar","previous":{"title":"Panels","permalink":"/docs/paracord/panels"},"next":{"title":"Ledger","permalink":"/docs/paracord/ledger"}},{"id":"paracord/panels","title":"Panels","description":"Let's discover Panels.","source":"@site/docs/paracord/panels.md","sourceDirName":"paracord","slug":"/paracord/panels","permalink":"/docs/paracord/panels","draft":false,"unlisted":false,"editUrl":"https://github.com/otonoma/paranet/edit/main/docs/docs/paracord/panels.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"id":"panels","title":"Panels","draft":true,"sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"Adaptive Cards","permalink":"/docs/paracord/cards"},"next":{"title":"ORA","permalink":"/docs/paracord/ora"}},{"id":"paracord/paracord","title":"Paracord Client","description":"Let's discover Paracord.","source":"@site/docs/paracord/index.md","sourceDirName":"paracord","slug":"/paracord/","permalink":"/docs/paracord/","draft":false,"unlisted":false,"editUrl":"https://github.com/otonoma/paranet/edit/main/docs/docs/paracord/index.md","tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"id":"paracord","title":"Paracord Client","sidebar_position":6},"sidebar":"tutorialSidebar","previous":{"title":"Nvidia's Omniverse & Isaac Sim","permalink":"/docs/developer_tools/integration_guides/omniverse"},"next":{"title":"Views","permalink":"/docs/paracord/views"}},{"id":"paracord/views","title":"Views","description":"Let's discover Views.","source":"@site/docs/paracord/views.md","sourceDirName":"paracord","slug":"/paracord/views","permalink":"/docs/paracord/views","draft":false,"unlisted":false,"editUrl":"https://github.com/otonoma/paranet/edit/main/docs/docs/paracord/views.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"id":"views","title":"Views","draft":true,"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Paracord Client","permalink":"/docs/paracord/"},"next":{"title":"Adaptive Cards","permalink":"/docs/paracord/cards"}},{"id":"paraflow/advanced/advanced","title":"Advanced Concepts","description":"Let's dive into the next level of Paraflow topics.","source":"@site/docs/paraflow/advanced/index.md","sourceDirName":"paraflow/advanced","slug":"/paraflow/advanced/","permalink":"/docs/paraflow/advanced/","draft":false,"unlisted":false,"editUrl":"https://github.com/otonoma/paranet/edit/main/docs/docs/paraflow/advanced/index.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"id":"advanced","title":"Advanced Concepts","sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Tasks","permalink":"/docs/paraflow/basics/tasks"},"next":{"title":"Parameters","permalink":"/docs/paraflow/advanced/parameters"}},{"id":"paraflow/advanced/bindings","title":"Bindings","description":"Call Bindings","source":"@site/docs/paraflow/advanced/bindings.md","sourceDirName":"paraflow/advanced","slug":"/paraflow/advanced/bindings","permalink":"/docs/paraflow/advanced/bindings","draft":false,"unlisted":false,"editUrl":"https://github.com/otonoma/paranet/edit/main/docs/docs/paraflow/advanced/bindings.md","tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"id":"bindings","title":"Bindings","sidebar_position":6},"sidebar":"tutorialSidebar","previous":{"title":"Control Flow","permalink":"/docs/paraflow/advanced/control_flow"},"next":{"title":"Runtime Internals","permalink":"/docs/paraflow/advanced/runtime_internals"}},{"id":"paraflow/advanced/control_flow","title":"Control Flow","description":"If Statement","source":"@site/docs/paraflow/advanced/control_flow.md","sourceDirName":"paraflow/advanced","slug":"/paraflow/advanced/control_flow","permalink":"/docs/paraflow/advanced/control_flow","draft":false,"unlisted":false,"editUrl":"https://github.com/otonoma/paranet/edit/main/docs/docs/paraflow/advanced/control_flow.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"id":"control_flow","title":"Control Flow","sidebar_position":5},"sidebar":"tutorialSidebar","previous":{"title":"Tables","permalink":"/docs/paraflow/advanced/tables"},"next":{"title":"Bindings","permalink":"/docs/paraflow/advanced/bindings"}},{"id":"paraflow/advanced/functions-procedures","title":"Functions and Procedures","description":"Procedures and functions may be defined in order to reuse code in multiple events, rules, or tasks. Parameters are defined with types in the same way as event parameters.","source":"@site/docs/paraflow/advanced/functions_procedures.md","sourceDirName":"paraflow/advanced","slug":"/paraflow/advanced/functions-procedures","permalink":"/docs/paraflow/advanced/functions-procedures","draft":false,"unlisted":false,"editUrl":"https://github.com/otonoma/paranet/edit/main/docs/docs/paraflow/advanced/functions_procedures.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"id":"functions-procedures","title":"Functions and Procedures","sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Parameters","permalink":"/docs/paraflow/advanced/parameters"},"next":{"title":"Skills","permalink":"/docs/paraflow/advanced/skills"}},{"id":"paraflow/advanced/json","title":"JSON","description":"For mostly historical reasons, Paraflow variables cannot hold objects.  All variables are scalars or tables.  However, you can manipulate JSON data in various ways in Paraflow.","source":"@site/docs/paraflow/advanced/json.md","sourceDirName":"paraflow/advanced","slug":"/paraflow/advanced/json","permalink":"/docs/paraflow/advanced/json","draft":false,"unlisted":false,"editUrl":"https://github.com/otonoma/paranet/edit/main/docs/docs/paraflow/advanced/json.md","tags":[],"version":"current","sidebarPosition":8,"frontMatter":{"id":"json","title":"JSON","sidebar_position":8},"sidebar":"tutorialSidebar","previous":{"title":"Runtime Internals","permalink":"/docs/paraflow/advanced/runtime_internals"},"next":{"title":"Services","permalink":"/docs/paraflow/services/"}},{"id":"paraflow/advanced/parameters","title":"Parameters","description":"The parameter list is a comma-separated list of parameter definitions, which include the name and type of the parameter.","source":"@site/docs/paraflow/advanced/parameters.md","sourceDirName":"paraflow/advanced","slug":"/paraflow/advanced/parameters","permalink":"/docs/paraflow/advanced/parameters","draft":false,"unlisted":false,"editUrl":"https://github.com/otonoma/paranet/edit/main/docs/docs/paraflow/advanced/parameters.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"id":"parameters","title":"Parameters","sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Advanced Concepts","permalink":"/docs/paraflow/advanced/"},"next":{"title":"Functions and Procedures","permalink":"/docs/paraflow/advanced/functions-procedures"}},{"id":"paraflow/advanced/runtime_internals","title":"Runtime Internals","description":"Planner","source":"@site/docs/paraflow/advanced/runtime_internals.md","sourceDirName":"paraflow/advanced","slug":"/paraflow/advanced/runtime_internals","permalink":"/docs/paraflow/advanced/runtime_internals","draft":false,"unlisted":false,"editUrl":"https://github.com/otonoma/paranet/edit/main/docs/docs/paraflow/advanced/runtime_internals.md","tags":[],"version":"current","sidebarPosition":7,"frontMatter":{"id":"runtime_internals","title":"Runtime Internals","sidebar_position":7},"sidebar":"tutorialSidebar","previous":{"title":"Bindings","permalink":"/docs/paraflow/advanced/bindings"},"next":{"title":"JSON","permalink":"/docs/paraflow/advanced/json"}},{"id":"paraflow/advanced/skills","title":"Skills","description":"Skill Decorators","source":"@site/docs/paraflow/advanced/skills.md","sourceDirName":"paraflow/advanced","slug":"/paraflow/advanced/skills","permalink":"/docs/paraflow/advanced/skills","draft":false,"unlisted":false,"editUrl":"https://github.com/otonoma/paranet/edit/main/docs/docs/paraflow/advanced/skills.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"id":"skills","title":"Skills","sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Functions and Procedures","permalink":"/docs/paraflow/advanced/functions-procedures"},"next":{"title":"Tables","permalink":"/docs/paraflow/advanced/tables"}},{"id":"paraflow/advanced/tables","title":"Tables","description":"Paraflow programs can define and manipulate application tables that are stored in a database, as well as small in-memory tables represented by a local variable. The language provides statements for creating, deleting, updating, and querying tables.","source":"@site/docs/paraflow/advanced/tables.md","sourceDirName":"paraflow/advanced","slug":"/paraflow/advanced/tables","permalink":"/docs/paraflow/advanced/tables","draft":false,"unlisted":false,"editUrl":"https://github.com/otonoma/paranet/edit/main/docs/docs/paraflow/advanced/tables.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"id":"tables","title":"Tables","sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"Skills","permalink":"/docs/paraflow/advanced/skills"},"next":{"title":"Control Flow","permalink":"/docs/paraflow/advanced/control_flow"}},{"id":"paraflow/basics/basics","title":"Basic Concepts","description":"Program Execution","source":"@site/docs/paraflow/basics/index.md","sourceDirName":"paraflow/basics","slug":"/paraflow/basics/","permalink":"/docs/paraflow/basics/","draft":false,"unlisted":false,"editUrl":"https://github.com/otonoma/paranet/edit/main/docs/docs/paraflow/basics/index.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"id":"basics","title":"Basic Concepts","sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Introduction","permalink":"/docs/paraflow/introduction"},"next":{"title":"Goals","permalink":"/docs/paraflow/basics/goals"}},{"id":"paraflow/basics/events","title":"Events","description":"The event construct defines what to do when some external event occurs, including a skill request from the Paranet. When the event is preceded by the skill annotation, it is automatically registered as a skill on the Paranet.","source":"@site/docs/paraflow/basics/events.md","sourceDirName":"paraflow/basics","slug":"/paraflow/basics/events","permalink":"/docs/paraflow/basics/events","draft":false,"unlisted":false,"editUrl":"https://github.com/otonoma/paranet/edit/main/docs/docs/paraflow/basics/events.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"id":"events","title":"Events","sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Goals","permalink":"/docs/paraflow/basics/goals"},"next":{"title":"Rules","permalink":"/docs/paraflow/basics/rules"}},{"id":"paraflow/basics/goals","title":"Goals","description":"A Paraflow goal represents a desired activity to perform. The activity may be parameterized by data. A goal instance consists of a name and zero or more specific parameter values. Here is an example goal:","source":"@site/docs/paraflow/basics/goals.md","sourceDirName":"paraflow/basics","slug":"/paraflow/basics/goals","permalink":"/docs/paraflow/basics/goals","draft":false,"unlisted":false,"editUrl":"https://github.com/otonoma/paranet/edit/main/docs/docs/paraflow/basics/goals.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"id":"goals","title":"Goals","sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Basic Concepts","permalink":"/docs/paraflow/basics/"},"next":{"title":"Events","permalink":"/docs/paraflow/basics/events"}},{"id":"paraflow/basics/rules","title":"Rules","description":"AKA Goal Planning","source":"@site/docs/paraflow/basics/rules.md","sourceDirName":"paraflow/basics","slug":"/paraflow/basics/rules","permalink":"/docs/paraflow/basics/rules","draft":false,"unlisted":false,"editUrl":"https://github.com/otonoma/paranet/edit/main/docs/docs/paraflow/basics/rules.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"id":"rules","title":"Rules","sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Events","permalink":"/docs/paraflow/basics/events"},"next":{"title":"Variables","permalink":"/docs/paraflow/basics/variables"}},{"id":"paraflow/basics/tasks","title":"Tasks","description":"The task construct defines how to perform a goal. This may be to take some action internally, or it could be to delegate the work to another actor via the Paranet.","source":"@site/docs/paraflow/basics/tasks.md","sourceDirName":"paraflow/basics","slug":"/paraflow/basics/tasks","permalink":"/docs/paraflow/basics/tasks","draft":false,"unlisted":false,"editUrl":"https://github.com/otonoma/paranet/edit/main/docs/docs/paraflow/basics/tasks.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Variables","permalink":"/docs/paraflow/basics/variables"},"next":{"title":"Advanced Concepts","permalink":"/docs/paraflow/advanced/"}},{"id":"paraflow/basics/variables","title":"Variables","description":"Local variables are created with the let statement. Variable types are determined at runtime and include numbers, strings, and tables. In its simplest form, the let statement specifies the name of the variable and an expression for its value as in:","source":"@site/docs/paraflow/basics/variables.md","sourceDirName":"paraflow/basics","slug":"/paraflow/basics/variables","permalink":"/docs/paraflow/basics/variables","draft":false,"unlisted":false,"editUrl":"https://github.com/otonoma/paranet/edit/main/docs/docs/paraflow/basics/variables.md","tags":[],"version":"current","sidebarPosition":7,"frontMatter":{"id":"variables","title":"Variables","sidebar_position":7},"sidebar":"tutorialSidebar","previous":{"title":"Rules","permalink":"/docs/paraflow/basics/rules"},"next":{"title":"Tasks","permalink":"/docs/paraflow/basics/tasks"}},{"id":"paraflow/examples/examples","title":"Paraflow Examples","description":"Walk through our examples who a better understanding.","source":"@site/docs/paraflow/examples/index.md","sourceDirName":"paraflow/examples","slug":"/paraflow/examples/","permalink":"/docs/paraflow/examples/","draft":false,"unlisted":false,"editUrl":"https://github.com/otonoma/paranet/edit/main/docs/docs/paraflow/examples/index.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"id":"examples","title":"Paraflow Examples","sidebar_position":5},"sidebar":"tutorialSidebar","previous":{"title":"Side Cars","permalink":"/docs/paraflow/services/side-cars"},"next":{"title":"Hello World","permalink":"/docs/paraflow/examples/hello-world"}},{"id":"paraflow/examples/hello-world","title":"Hello World","description":"Let's create a simple actor on the Paranet and test it.","source":"@site/docs/paraflow/examples/hello_world.md","sourceDirName":"paraflow/examples","slug":"/paraflow/examples/hello-world","permalink":"/docs/paraflow/examples/hello-world","draft":false,"unlisted":false,"editUrl":"https://github.com/otonoma/paranet/edit/main/docs/docs/paraflow/examples/hello_world.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"id":"hello-world","title":"Hello World","sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Paraflow Examples","permalink":"/docs/paraflow/examples/"},"next":{"title":"Developer Guides & Tools","permalink":"/docs/developer_tools/"}},{"id":"paraflow/introduction","title":"Introduction","description":"Paraflow is a simple language designed to build autonomous agents. Paraflow agents are goal-seeking: based on a set of goals, they plan and execute tasks that make progress towards achieving those goals. The behavior of Paraflow agents is deterministic, transparent, and inspectable.","source":"@site/docs/paraflow/introduction.md","sourceDirName":"paraflow","slug":"/paraflow/introduction","permalink":"/docs/paraflow/introduction","draft":false,"unlisted":false,"editUrl":"https://github.com/otonoma/paranet/edit/main/docs/docs/paraflow/introduction.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"id":"introduction","title":"Introduction","sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Paraflow","permalink":"/docs/paraflow/"},"next":{"title":"Basic Concepts","permalink":"/docs/paraflow/basics/"}},{"id":"paraflow/paraflow","title":"Paraflow","description":"Welcome to the Paraflow section of the Paranet documentation! This section will help you understand the basics of The Paranet's language, Paraflow.","source":"@site/docs/paraflow/index.md","sourceDirName":"paraflow","slug":"/paraflow/","permalink":"/docs/paraflow/","draft":false,"unlisted":false,"editUrl":"https://github.com/otonoma/paranet/edit/main/docs/docs/paraflow/index.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"id":"paraflow","title":"Paraflow","sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"Security","permalink":"/docs/paranet_concepts/security"},"next":{"title":"Introduction","permalink":"/docs/paraflow/introduction"}},{"id":"paraflow/services/debugging","title":"Debugger","description":"The VSCode extension for Visual Studio Code provides an integrated Paraflow debugger providing a familiar debugging experience for Paraflow actors.","source":"@site/docs/paraflow/services/debugger.md","sourceDirName":"paraflow/services","slug":"/paraflow/services/debugging","permalink":"/docs/paraflow/services/debugging","draft":false,"unlisted":false,"editUrl":"https://github.com/otonoma/paranet/edit/main/docs/docs/paraflow/services/debugger.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"id":"debugging","title":"Debugger","draft":true,"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Service API's","permalink":"/docs/paraflow/services/service-apis"},"next":{"title":"Python Agent","permalink":"/docs/paraflow/services/python-agent"}},{"id":"paraflow/services/python-agent","title":"Python Agent","description":"","source":"@site/docs/paraflow/services/python_agent.md","sourceDirName":"paraflow/services","slug":"/paraflow/services/python-agent","permalink":"/docs/paraflow/services/python-agent","draft":false,"unlisted":false,"editUrl":"https://github.com/otonoma/paranet/edit/main/docs/docs/paraflow/services/python_agent.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"id":"python-agent","title":"Python Agent","draft":true,"sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"Debugger","permalink":"/docs/paraflow/services/debugging"},"next":{"title":"Side Cars","permalink":"/docs/paraflow/services/side-cars"}},{"id":"paraflow/services/service-apis","title":"Service API's","description":"A Paraflow task may be used to make calls to any external service that provides a GraphQL interface. The on clause of the Paraflow task declaration provides the default URL of the endpoint providing the GraphQL service. The endpoint may also be overridden in individual calls to the service via the rpc statements.","source":"@site/docs/paraflow/services/service_apis.md","sourceDirName":"paraflow/services","slug":"/paraflow/services/service-apis","permalink":"/docs/paraflow/services/service-apis","draft":false,"unlisted":false,"editUrl":"https://github.com/otonoma/paranet/edit/main/docs/docs/paraflow/services/service_apis.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"id":"service-apis","title":"Service API's","sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Services","permalink":"/docs/paraflow/services/"},"next":{"title":"Debugger","permalink":"/docs/paraflow/services/debugging"}},{"id":"paraflow/services/services","title":"Services","description":"Paraflow has extension services.","source":"@site/docs/paraflow/services/index.md","sourceDirName":"paraflow/services","slug":"/paraflow/services/","permalink":"/docs/paraflow/services/","draft":false,"unlisted":false,"editUrl":"https://github.com/otonoma/paranet/edit/main/docs/docs/paraflow/services/index.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"id":"services","title":"Services","sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"JSON","permalink":"/docs/paraflow/advanced/json"},"next":{"title":"Service API's","permalink":"/docs/paraflow/services/service-apis"}},{"id":"paraflow/services/side-cars","title":"Side Cars","description":"","source":"@site/docs/paraflow/services/side_cars.md","sourceDirName":"paraflow/services","slug":"/paraflow/services/side-cars","permalink":"/docs/paraflow/services/side-cars","draft":false,"unlisted":false,"editUrl":"https://github.com/otonoma/paranet/edit/main/docs/docs/paraflow/services/side_cars.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"id":"side-cars","title":"Side Cars","draft":true,"sidebar_position":5},"sidebar":"tutorialSidebar","previous":{"title":"Python Agent","permalink":"/docs/paraflow/services/python-agent"},"next":{"title":"Paraflow Examples","permalink":"/docs/paraflow/examples/"}},{"id":"paranet_concepts/actors","title":"Actors","description":"An actor in the Paranet is any entity capable of autonomous action, decision-making, or interaction. Actors are the primary units of computation and intelligence, enabling distributed autonomy across the network.","source":"@site/docs/paranet_concepts/actors.md","sourceDirName":"paranet_concepts","slug":"/paranet_concepts/actors","permalink":"/docs/paranet_concepts/actors","draft":false,"unlisted":false,"editUrl":"https://github.com/otonoma/paranet/edit/main/docs/docs/paranet_concepts/actors.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"id":"actors","title":"Actors","sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Paranet Node Architecture","permalink":"/docs/paranet_concepts/node-architecture"},"next":{"title":"Paraflow - A New Paradigm Language","permalink":"/docs/paranet_concepts/paraflow"}},{"id":"paranet_concepts/autonomation","title":"Autonomony And Autonomation","description":"Autonomy refers to the ability of systems to operate independently, making decisions and performing tasks with minimal human intervention. It is characterized by capabilities such as self-management, adaptation, and intelligent interaction with the environment.","source":"@site/docs/paranet_concepts/autonomation.md","sourceDirName":"paranet_concepts","slug":"/paranet_concepts/autonomation","permalink":"/docs/paranet_concepts/autonomation","draft":false,"unlisted":false,"editUrl":"https://github.com/otonoma/paranet/edit/main/docs/docs/paranet_concepts/autonomation.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"id":"autonomation","title":"Autonomony And Autonomation","sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Paranet Concepts","permalink":"/docs/paranet_concepts/"},"next":{"title":"Paranet Node Architecture","permalink":"/docs/paranet_concepts/node-architecture"}},{"id":"paranet_concepts/distributed-intelligence","title":"Distributed Intelligence","description":"Distributed Intelligence is the collective capability of autonomous actors to reason, learn, and adapt across the Paranet. It enables:","source":"@site/docs/paranet_concepts/distributed_intelligence.md","sourceDirName":"paranet_concepts","slug":"/paranet_concepts/distributed-intelligence","permalink":"/docs/paranet_concepts/distributed-intelligence","draft":false,"unlisted":false,"editUrl":"https://github.com/otonoma/paranet/edit/main/docs/docs/paranet_concepts/distributed_intelligence.md","tags":[],"version":"current","sidebarPosition":8,"frontMatter":{"id":"distributed-intelligence","title":"Distributed Intelligence","sidebar_position":8},"sidebar":"tutorialSidebar","previous":{"title":"Paranet Distributed Actor Operating System","permalink":"/docs/paranet_concepts/pdos"},"next":{"title":"Observational Intelligence","permalink":"/docs/paranet_concepts/observational-intelligence"}},{"id":"paranet_concepts/node-architecture","title":"Paranet Node Architecture","description":"A Paranet node (or Paranode) is the fundamental building block of the Paranet, hosting actors and facilitating their autonomous interactions. Each node consists of several key components that enable distributed intelligence and autonomy.","source":"@site/docs/paranet_concepts/node_architecture.md","sourceDirName":"paranet_concepts","slug":"/paranet_concepts/node-architecture","permalink":"/docs/paranet_concepts/node-architecture","draft":false,"unlisted":false,"editUrl":"https://github.com/otonoma/paranet/edit/main/docs/docs/paranet_concepts/node_architecture.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"id":"node-architecture","title":"Paranet Node Architecture","sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Autonomony And Autonomation","permalink":"/docs/paranet_concepts/autonomation"},"next":{"title":"Actors","permalink":"/docs/paranet_concepts/actors"}},{"id":"paranet_concepts/observational-intelligence","title":"Observational Intelligence","description":"The Paranet supports extensibility and observational intelligence, crucial for autonomous learning and adaptation.","source":"@site/docs/paranet_concepts/observational_intelligence.md","sourceDirName":"paranet_concepts","slug":"/paranet_concepts/observational-intelligence","permalink":"/docs/paranet_concepts/observational-intelligence","draft":false,"unlisted":false,"editUrl":"https://github.com/otonoma/paranet/edit/main/docs/docs/paranet_concepts/observational_intelligence.md","tags":[],"version":"current","sidebarPosition":9,"frontMatter":{"id":"observational-intelligence","title":"Observational Intelligence","sidebar_position":9},"sidebar":"tutorialSidebar","previous":{"title":"Distributed Intelligence","permalink":"/docs/paranet_concepts/distributed-intelligence"},"next":{"title":"Persistence","permalink":"/docs/paranet_concepts/persistence"}},{"id":"paranet_concepts/paraflow","title":"Paraflow - A New Paradigm Language","description":"Paraflow is a programming language designed specifically for autonomy within the Paranet. It enables actors to plan, reason, and execute tasks autonomously, addressing limitations of conventional languages.","source":"@site/docs/paranet_concepts/paraflow.md","sourceDirName":"paranet_concepts","slug":"/paranet_concepts/paraflow","permalink":"/docs/paranet_concepts/paraflow","draft":false,"unlisted":false,"editUrl":"https://github.com/otonoma/paranet/edit/main/docs/docs/paranet_concepts/paraflow.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"id":"paraflow","title":"Paraflow - A New Paradigm Language","sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"Actors","permalink":"/docs/paranet_concepts/actors"},"next":{"title":"Skill Definitions and Matching","permalink":"/docs/paranet_concepts/skills"}},{"id":"paranet_concepts/paranet_concepts","title":"Paranet Concepts","description":"The Paranet is an innovative Internet overlay designed to support distributed intelligence and autonomy, developed by Otonoma as outlined in \"Paranet: The Automation Platform for the Autonomous Internet\" by Jim Harding, February 2025. It represents a paradigm shift from traditional computing models, enabling a network of autonomous actors to collaborate, reason, and adapt in dynamic environments. This document introduces the core concepts that define the Paranet, providing a foundation for understanding its architecture, functionality, and potential impact.","source":"@site/docs/paranet_concepts/index.md","sourceDirName":"paranet_concepts","slug":"/paranet_concepts/","permalink":"/docs/paranet_concepts/","draft":false,"unlisted":false,"editUrl":"https://github.com/otonoma/paranet/edit/main/docs/docs/paranet_concepts/index.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"id":"paranet_concepts","title":"Paranet Concepts","sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Getting Started","permalink":"/docs/getting-started"},"next":{"title":"Autonomony And Autonomation","permalink":"/docs/paranet_concepts/autonomation"}},{"id":"paranet_concepts/pdos","title":"Paranet Distributed Actor Operating System","description":"The Paranet functions as a distributed operating system for autonomous actors, providing infrastructure for operation, communication, and collaboration.","source":"@site/docs/paranet_concepts/pdos.md","sourceDirName":"paranet_concepts","slug":"/paranet_concepts/pdos","permalink":"/docs/paranet_concepts/pdos","draft":false,"unlisted":false,"editUrl":"https://github.com/otonoma/paranet/edit/main/docs/docs/paranet_concepts/pdos.md","tags":[],"version":"current","sidebarPosition":7,"frontMatter":{"id":"pdos","title":"Paranet Distributed Actor Operating System","sidebar_position":7},"sidebar":"tutorialSidebar","previous":{"title":"Paranet Collaboration Protocol","permalink":"/docs/paranet_concepts/pncp"},"next":{"title":"Distributed Intelligence","permalink":"/docs/paranet_concepts/distributed-intelligence"}},{"id":"paranet_concepts/persistence","title":"Persistence","description":"Persistence in the Paranet ensures continuity and recovery for actors and the network.","source":"@site/docs/paranet_concepts/persistence.md","sourceDirName":"paranet_concepts","slug":"/paranet_concepts/persistence","permalink":"/docs/paranet_concepts/persistence","draft":false,"unlisted":false,"editUrl":"https://github.com/otonoma/paranet/edit/main/docs/docs/paranet_concepts/persistence.md","tags":[],"version":"current","sidebarPosition":10,"frontMatter":{"id":"persistence","title":"Persistence","sidebar_position":10},"sidebar":"tutorialSidebar","previous":{"title":"Observational Intelligence","permalink":"/docs/paranet_concepts/observational-intelligence"},"next":{"title":"Security","permalink":"/docs/paranet_concepts/security"}},{"id":"paranet_concepts/pncp","title":"Paranet Collaboration Protocol","description":"PnCP is the core protocol for actor communication and collaboration in the Paranet. It supports dynamic, skill-based interactions essential for distributed autonomy.","source":"@site/docs/paranet_concepts/pncp.md","sourceDirName":"paranet_concepts","slug":"/paranet_concepts/pncp","permalink":"/docs/paranet_concepts/pncp","draft":false,"unlisted":false,"editUrl":"https://github.com/otonoma/paranet/edit/main/docs/docs/paranet_concepts/pncp.md","tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"id":"pncp","title":"Paranet Collaboration Protocol","sidebar_position":6},"sidebar":"tutorialSidebar","previous":{"title":"Skill Definitions and Matching","permalink":"/docs/paranet_concepts/skills"},"next":{"title":"Paranet Distributed Actor Operating System","permalink":"/docs/paranet_concepts/pdos"}},{"id":"paranet_concepts/security","title":"Security","description":"Security in the Paranet is governed by Negative Trust Security (NTS), which assumes no inherent trust and continuously verifies behavior.","source":"@site/docs/paranet_concepts/security.md","sourceDirName":"paranet_concepts","slug":"/paranet_concepts/security","permalink":"/docs/paranet_concepts/security","draft":false,"unlisted":false,"editUrl":"https://github.com/otonoma/paranet/edit/main/docs/docs/paranet_concepts/security.md","tags":[],"version":"current","sidebarPosition":11,"frontMatter":{"id":"security","title":"Security","sidebar_position":11},"sidebar":"tutorialSidebar","previous":{"title":"Persistence","permalink":"/docs/paranet_concepts/persistence"},"next":{"title":"Paraflow","permalink":"/docs/paraflow/"}},{"id":"paranet_concepts/skills","title":"Skill Definitions and Matching","description":"Skills in the Paranet represent capabilities that actors can offer or request. They are defined by a subject and action pair and are central to autonomous collaboration.","source":"@site/docs/paranet_concepts/skills.md","sourceDirName":"paranet_concepts","slug":"/paranet_concepts/skills","permalink":"/docs/paranet_concepts/skills","draft":false,"unlisted":false,"editUrl":"https://github.com/otonoma/paranet/edit/main/docs/docs/paranet_concepts/skills.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"id":"skills","title":"Skill Definitions and Matching","sidebar_position":5},"sidebar":"tutorialSidebar","previous":{"title":"Paraflow - A New Paradigm Language","permalink":"/docs/paranet_concepts/paraflow"},"next":{"title":"Paranet Collaboration Protocol","permalink":"/docs/paranet_concepts/pncp"}}],"drafts":[],"sidebars":{"tutorialSidebar":[{"type":"doc","id":"introduction"},{"type":"doc","id":"getting-started"},{"type":"category","label":"Paranet Concepts","collapsible":true,"collapsed":true,"items":[{"type":"doc","id":"paranet_concepts/autonomation"},{"type":"doc","id":"paranet_concepts/node-architecture"},{"type":"doc","id":"paranet_concepts/actors"},{"type":"doc","id":"paranet_concepts/paraflow"},{"type":"doc","id":"paranet_concepts/skills"},{"type":"doc","id":"paranet_concepts/pncp"},{"type":"doc","id":"paranet_concepts/pdos"},{"type":"doc","id":"paranet_concepts/distributed-intelligence"},{"type":"doc","id":"paranet_concepts/observational-intelligence"},{"type":"doc","id":"paranet_concepts/persistence"},{"type":"doc","id":"paranet_concepts/security"}],"link":{"type":"doc","id":"paranet_concepts/paranet_concepts"}},{"type":"category","label":"Paraflow","collapsible":true,"collapsed":true,"items":[{"type":"doc","id":"paraflow/introduction"},{"type":"category","label":"Basic Concepts","collapsible":true,"collapsed":true,"items":[{"type":"doc","id":"paraflow/basics/goals"},{"type":"doc","id":"paraflow/basics/events"},{"type":"doc","id":"paraflow/basics/rules"},{"type":"doc","id":"paraflow/basics/variables"},{"type":"doc","id":"paraflow/basics/tasks"}],"link":{"type":"doc","id":"paraflow/basics/basics"}},{"type":"category","label":"Advanced Concepts","collapsible":true,"collapsed":true,"items":[{"type":"doc","id":"paraflow/advanced/parameters"},{"type":"doc","id":"paraflow/advanced/functions-procedures"},{"type":"doc","id":"paraflow/advanced/skills"},{"type":"doc","id":"paraflow/advanced/tables"},{"type":"doc","id":"paraflow/advanced/control_flow"},{"type":"doc","id":"paraflow/advanced/bindings"},{"type":"doc","id":"paraflow/advanced/runtime_internals"},{"type":"doc","id":"paraflow/advanced/json"}],"link":{"type":"doc","id":"paraflow/advanced/advanced"}},{"type":"category","label":"Services","collapsible":true,"collapsed":true,"items":[{"type":"doc","id":"paraflow/services/service-apis"},{"type":"doc","id":"paraflow/services/debugging"},{"type":"doc","id":"paraflow/services/python-agent"},{"type":"doc","id":"paraflow/services/side-cars"}],"link":{"type":"doc","id":"paraflow/services/services"}},{"type":"category","label":"Paraflow Examples","collapsible":true,"collapsed":true,"items":[{"type":"doc","id":"paraflow/examples/hello-world"}],"link":{"type":"doc","id":"paraflow/examples/examples"}}],"link":{"type":"doc","id":"paraflow/paraflow"}},{"type":"category","label":"Developer Guides & Tools","collapsible":true,"collapsed":true,"items":[{"type":"doc","id":"developer_tools/para-cli"},{"type":"doc","id":"developer_tools/vscode"},{"type":"category","label":"Integration Guides","collapsible":true,"collapsed":true,"items":[{"type":"doc","id":"developer_tools/integration_guides/omniverse"}],"link":{"type":"doc","id":"developer_tools/integration_guides/integration-guides"}}],"link":{"type":"doc","id":"developer_tools/developer_tools"}},{"type":"category","label":"Paracord Client","collapsible":true,"collapsed":true,"items":[{"type":"doc","id":"paracord/views"},{"type":"doc","id":"paracord/cards"},{"type":"doc","id":"paracord/panels"},{"type":"doc","id":"paracord/ora"},{"type":"doc","id":"paracord/ledger"},{"type":"doc","id":"paracord/inbox"}],"link":{"type":"doc","id":"paracord/paracord"}},{"type":"doc","label":"Deployment & Operations","id":"deployment/deployment"}]}}]}},"docusaurus-plugin-content-pages":{"default":[{"type":"jsx","permalink":"/","source":"@site/src/pages/index.js"},{"type":"mdx","permalink":"/markdown-page","source":"@site/src/pages/markdown-page.md","title":"Markdown page example","description":"You don't need React to write simple standalone pages.","frontMatter":{"title":"Markdown page example"},"unlisted":false}]},"docusaurus-plugin-debug":{},"docusaurus-theme-classic":{},"docusaurus-bootstrap-plugin":{},"docusaurus-mdx-fallback-plugin":{}}}