{"version":{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"link","label":"Introduction","href":"/docs/","docId":"introduction","unlisted":false},{"type":"link","label":"Getting Started","href":"/docs/getting-started","docId":"getting-started","unlisted":false},{"type":"category","label":"Paranet Concepts","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Autonomony And Autonomation","href":"/docs/paranet_concepts/autonomation","docId":"paranet_concepts/autonomation","unlisted":false},{"type":"link","label":"Paranet Node Architecture","href":"/docs/paranet_concepts/node-architecture","docId":"paranet_concepts/node-architecture","unlisted":false},{"type":"link","label":"Actors","href":"/docs/paranet_concepts/actors","docId":"paranet_concepts/actors","unlisted":false},{"type":"link","label":"Paraflow - A New Paradigm Language","href":"/docs/paranet_concepts/paraflow","docId":"paranet_concepts/paraflow","unlisted":false},{"type":"link","label":"Skill Definitions and Matching","href":"/docs/paranet_concepts/skills","docId":"paranet_concepts/skills","unlisted":false},{"type":"link","label":"Paranet Collaboration Protocol","href":"/docs/paranet_concepts/pncp","docId":"paranet_concepts/pncp","unlisted":false},{"type":"link","label":"Paranet Distributed Actor Operating System","href":"/docs/paranet_concepts/pdos","docId":"paranet_concepts/pdos","unlisted":false},{"type":"link","label":"Distributed Intelligence","href":"/docs/paranet_concepts/distributed-intelligence","docId":"paranet_concepts/distributed-intelligence","unlisted":false},{"type":"link","label":"Observational Intelligence","href":"/docs/paranet_concepts/observational-intelligence","docId":"paranet_concepts/observational-intelligence","unlisted":false},{"type":"link","label":"Persistence","href":"/docs/paranet_concepts/persistence","docId":"paranet_concepts/persistence","unlisted":false},{"type":"link","label":"Security","href":"/docs/paranet_concepts/security","docId":"paranet_concepts/security","unlisted":false}],"href":"/docs/paranet_concepts/"},{"type":"category","label":"Paraflow","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Introduction","href":"/docs/paraflow/introduction","docId":"paraflow/introduction","unlisted":false},{"type":"category","label":"Basic Concepts","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Goals","href":"/docs/paraflow/basics/goals","docId":"paraflow/basics/goals","unlisted":false},{"type":"link","label":"Events","href":"/docs/paraflow/basics/events","docId":"paraflow/basics/events","unlisted":false},{"type":"link","label":"Rules","href":"/docs/paraflow/basics/rules","docId":"paraflow/basics/rules","unlisted":false},{"type":"link","label":"Variables","href":"/docs/paraflow/basics/variables","docId":"paraflow/basics/variables","unlisted":false},{"type":"link","label":"Tasks","href":"/docs/paraflow/basics/tasks","docId":"paraflow/basics/tasks","unlisted":false}],"href":"/docs/paraflow/basics/"},{"type":"category","label":"Advanced Concepts","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Parameters","href":"/docs/paraflow/advanced/parameters","docId":"paraflow/advanced/parameters","unlisted":false},{"type":"link","label":"Functions and Procedures","href":"/docs/paraflow/advanced/functions-procedures","docId":"paraflow/advanced/functions-procedures","unlisted":false},{"type":"link","label":"Skills","href":"/docs/paraflow/advanced/skills","docId":"paraflow/advanced/skills","unlisted":false},{"type":"link","label":"Tables","href":"/docs/paraflow/advanced/tables","docId":"paraflow/advanced/tables","unlisted":false},{"type":"link","label":"Control Flow","href":"/docs/paraflow/advanced/control-flow","docId":"paraflow/advanced/control-flow","unlisted":false},{"type":"link","label":"Bindings","href":"/docs/paraflow/advanced/bindings","docId":"paraflow/advanced/bindings","unlisted":false},{"type":"link","label":"Runtime Internals","href":"/docs/paraflow/advanced/runtime-internals","docId":"paraflow/advanced/runtime-internals","unlisted":false},{"type":"link","label":"JSON","href":"/docs/paraflow/advanced/json","docId":"paraflow/advanced/json","unlisted":false}],"href":"/docs/paraflow/advanced/"},{"type":"category","label":"Services","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Service API's","href":"/docs/paraflow/services/service-apis","docId":"paraflow/services/service-apis","unlisted":false},{"type":"link","label":"Debugger","href":"/docs/paraflow/services/debugging","docId":"paraflow/services/debugging","unlisted":false},{"type":"link","label":"Python Agent","href":"/docs/paraflow/services/python-agent","docId":"paraflow/services/python-agent","unlisted":false},{"type":"link","label":"Side Cars","href":"/docs/paraflow/services/side-cars","docId":"paraflow/services/side-cars","unlisted":false}],"href":"/docs/paraflow/services/"},{"type":"category","label":"Paraflow Examples","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Hello World","href":"/docs/paraflow/examples/hello-world","docId":"paraflow/examples/hello-world","unlisted":false}],"href":"/docs/paraflow/examples/"}],"href":"/docs/paraflow/"},{"type":"category","label":"Developer Guides & Tools","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Para CLI","href":"/docs/developer_tools/para-cli","docId":"developer_tools/para-cli","unlisted":false},{"type":"link","label":"VSCode Extension","href":"/docs/developer_tools/vscode","docId":"developer_tools/vscode","unlisted":false},{"type":"category","label":"Integration Guides","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Nvidia's Omniverse & Isaac Sim","href":"/docs/developer_tools/integration_guides/omniverse","docId":"developer_tools/integration_guides/omniverse","unlisted":false}],"href":"/docs/developer_tools/integration_guides/"}],"href":"/docs/developer_tools/"},{"type":"category","label":"Paracord Client","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Views","href":"/docs/paracord/views","docId":"paracord/views","unlisted":false},{"type":"link","label":"Adaptive Cards","href":"/docs/paracord/cards","docId":"paracord/cards","unlisted":false},{"type":"link","label":"Panels","href":"/docs/paracord/panels","docId":"paracord/panels","unlisted":false},{"type":"link","label":"ORA","href":"/docs/paracord/ora","docId":"paracord/ora","unlisted":false},{"type":"link","label":"Ledger","href":"/docs/paracord/ledger","docId":"paracord/ledger","unlisted":false},{"type":"link","label":"Inbox","href":"/docs/paracord/inbox","docId":"paracord/inbox","unlisted":false}],"href":"/docs/paracord/"},{"type":"link","label":"Deployment & Operations","href":"/docs/deployment/","docId":"deployment/deployment","unlisted":false}]},"docs":{"deployment/deployment":{"id":"deployment/deployment","title":"Deployment & Operations","description":"","sidebar":"tutorialSidebar"},"developer_tools/developer-tools":{"id":"developer_tools/developer-tools","title":"Developer Guides & Tools","description":"","sidebar":"tutorialSidebar"},"developer_tools/integration_guides/integration-guides":{"id":"developer_tools/integration_guides/integration-guides","title":"Integration Guides","description":"","sidebar":"tutorialSidebar"},"developer_tools/integration_guides/omniverse":{"id":"developer_tools/integration_guides/omniverse","title":"Nvidia's Omniverse & Isaac Sim","description":"","sidebar":"tutorialSidebar"},"developer_tools/para-cli":{"id":"developer_tools/para-cli","title":"Para CLI","description":"The Paranet Cli allows for easy deployments of actors and paranets to local and cloud environments.","sidebar":"tutorialSidebar"},"developer_tools/vscode":{"id":"developer_tools/vscode","title":"VSCode Extension","description":"The paranet extension makes it easy to view, edit and deploy resources on the paranet.","sidebar":"tutorialSidebar"},"getting-started":{"id":"getting-started","title":"Getting Started","description":"Welcome to the Getting Started guide for the Paranet! This guide will walk you through the setup process, introduce you to the tools youâ€™ll need, and help you deploy your first Paranet.","sidebar":"tutorialSidebar"},"introduction":{"id":"introduction","title":"Introduction","description":"Welcome to the Paranet documentation!","sidebar":"tutorialSidebar"},"paracord/cards":{"id":"paracord/cards","title":"Adaptive Cards","description":"What's an Adpative Card?","sidebar":"tutorialSidebar"},"paracord/inbox":{"id":"paracord/inbox","title":"Inbox","description":"What's the Inbox?","sidebar":"tutorialSidebar"},"paracord/ledger":{"id":"paracord/ledger","title":"Ledger","description":"Ledger is place to explore the Paranet actors conversations.","sidebar":"tutorialSidebar"},"paracord/ora":{"id":"paracord/ora","title":"ORA","description":"What's an ORA?","sidebar":"tutorialSidebar"},"paracord/panels":{"id":"paracord/panels","title":"Panels","description":"Let's discover Panels.","sidebar":"tutorialSidebar"},"paracord/paracord":{"id":"paracord/paracord","title":"Paracord Client","description":"Let's discover Paracord, our client application build to interface with the paranet.","sidebar":"tutorialSidebar"},"paracord/views":{"id":"paracord/views","title":"Views","description":"Let's discover Views.","sidebar":"tutorialSidebar"},"paraflow/advanced/advanced":{"id":"paraflow/advanced/advanced","title":"Advanced Concepts","description":"Let's dive into the next level of Paraflow topics.","sidebar":"tutorialSidebar"},"paraflow/advanced/bindings":{"id":"paraflow/advanced/bindings","title":"Bindings","description":"Call Bindings","sidebar":"tutorialSidebar"},"paraflow/advanced/control-flow":{"id":"paraflow/advanced/control-flow","title":"Control Flow","description":"If Statement","sidebar":"tutorialSidebar"},"paraflow/advanced/functions-procedures":{"id":"paraflow/advanced/functions-procedures","title":"Functions and Procedures","description":"Procedures and functions may be defined in order to reuse code in multiple events, rules, or tasks. Parameters are defined with types in the same way as event parameters.","sidebar":"tutorialSidebar"},"paraflow/advanced/json":{"id":"paraflow/advanced/json","title":"JSON","description":"For mostly historical reasons, Paraflow variables cannot hold objects.  All variables are scalars or tables.  However, you can manipulate JSON data in various ways in Paraflow.","sidebar":"tutorialSidebar"},"paraflow/advanced/parameters":{"id":"paraflow/advanced/parameters","title":"Parameters","description":"The parameter list is a comma-separated list of parameter definitions, which include the name and type of the parameter.","sidebar":"tutorialSidebar"},"paraflow/advanced/runtime-internals":{"id":"paraflow/advanced/runtime-internals","title":"Runtime Internals","description":"Planner","sidebar":"tutorialSidebar"},"paraflow/advanced/skills":{"id":"paraflow/advanced/skills","title":"Skills","description":"Skill Decorators","sidebar":"tutorialSidebar"},"paraflow/advanced/tables":{"id":"paraflow/advanced/tables","title":"Tables","description":"Paraflow programs can define and manipulate application tables that are stored in a database, as well as small in-memory tables represented by a local variable. The language provides statements for creating, deleting, updating, and querying tables.","sidebar":"tutorialSidebar"},"paraflow/basics/basics":{"id":"paraflow/basics/basics","title":"Basic Concepts","description":"Program Execution","sidebar":"tutorialSidebar"},"paraflow/basics/events":{"id":"paraflow/basics/events","title":"Events","description":"The event construct defines what to do when some external event occurs, including a skill request from the Paranet. When the event is preceded by the skill annotation, it is automatically registered as a skill on the Paranet.","sidebar":"tutorialSidebar"},"paraflow/basics/goals":{"id":"paraflow/basics/goals","title":"Goals","description":"A Paraflow goal represents a desired activity to perform. The activity may be parameterized by data. A goal instance consists of a name and zero or more specific parameter values. Here is an example goal:","sidebar":"tutorialSidebar"},"paraflow/basics/rules":{"id":"paraflow/basics/rules","title":"Rules","description":"AKA Goal Planning","sidebar":"tutorialSidebar"},"paraflow/basics/tasks":{"id":"paraflow/basics/tasks","title":"Tasks","description":"The task construct defines how to perform a goal. This may be to take some action internally, or it could be to delegate the work to another actor via the Paranet.","sidebar":"tutorialSidebar"},"paraflow/basics/variables":{"id":"paraflow/basics/variables","title":"Variables","description":"Local variables are created with the let statement. Variable types are determined at runtime and include numbers, strings, and tables. In its simplest form, the let statement specifies the name of the variable and an expression for its value as in:","sidebar":"tutorialSidebar"},"paraflow/examples/examples":{"id":"paraflow/examples/examples","title":"Paraflow Examples","description":"Walk through our examples who a better understanding.","sidebar":"tutorialSidebar"},"paraflow/examples/hello-world":{"id":"paraflow/examples/hello-world","title":"Hello World","description":"Let's create a simple actor on the Paranet and test it.","sidebar":"tutorialSidebar"},"paraflow/introduction":{"id":"paraflow/introduction","title":"Introduction","description":"Paraflow is a simple language designed to build autonomous agents. Paraflow agents are goal-seeking: based on a set of goals, they plan and execute tasks that make progress towards achieving those goals. The behavior of Paraflow agents is deterministic, transparent, and inspectable.","sidebar":"tutorialSidebar"},"paraflow/paraflow":{"id":"paraflow/paraflow","title":"Paraflow","description":"Welcome to the Paraflow section of the Paranet documentation! This section will help you understand the basics of The Paranet's language, Paraflow.","sidebar":"tutorialSidebar"},"paraflow/services/debugging":{"id":"paraflow/services/debugging","title":"Debugger","description":"The VSCode extension for Visual Studio Code provides an integrated Paraflow debugger providing a familiar debugging experience for Paraflow actors.","sidebar":"tutorialSidebar"},"paraflow/services/python-agent":{"id":"paraflow/services/python-agent","title":"Python Agent","description":"","sidebar":"tutorialSidebar"},"paraflow/services/service-apis":{"id":"paraflow/services/service-apis","title":"Service API's","description":"A Paraflow task may be used to make calls to any external service that provides a GraphQL interface. The on clause of the Paraflow task declaration provides the default URL of the endpoint providing the GraphQL service. The endpoint may also be overridden in individual calls to the service via the rpc statements.","sidebar":"tutorialSidebar"},"paraflow/services/services":{"id":"paraflow/services/services","title":"Services","description":"Paraflow has extension services.","sidebar":"tutorialSidebar"},"paraflow/services/side-cars":{"id":"paraflow/services/side-cars","title":"Side Cars","description":"","sidebar":"tutorialSidebar"},"paranet_concepts/actors":{"id":"paranet_concepts/actors","title":"Actors","description":"An actor in the Paranet is any entity capable of autonomous action, decision-making, or interaction. Actors are the primary units of computation and intelligence, enabling distributed autonomy across the network.","sidebar":"tutorialSidebar"},"paranet_concepts/autonomation":{"id":"paranet_concepts/autonomation","title":"Autonomony And Autonomation","description":"Autonomy refers to the ability of systems to operate independently, making decisions and performing tasks with minimal human intervention. It is characterized by capabilities such as self-management, adaptation, and intelligent interaction with the environment.","sidebar":"tutorialSidebar"},"paranet_concepts/distributed-intelligence":{"id":"paranet_concepts/distributed-intelligence","title":"Distributed Intelligence","description":"Distributed Intelligence is the collective capability of autonomous actors to reason, learn, and adapt across the Paranet. It enables:","sidebar":"tutorialSidebar"},"paranet_concepts/node-architecture":{"id":"paranet_concepts/node-architecture","title":"Paranet Node Architecture","description":"A Paranet node (or Paranode) is the fundamental building block of the Paranet, hosting actors and facilitating their autonomous interactions. Each node consists of several key components that enable distributed intelligence and autonomy.","sidebar":"tutorialSidebar"},"paranet_concepts/observational-intelligence":{"id":"paranet_concepts/observational-intelligence","title":"Observational Intelligence","description":"The Paranet supports extensibility and observational intelligence, crucial for autonomous learning and adaptation.","sidebar":"tutorialSidebar"},"paranet_concepts/paraflow":{"id":"paranet_concepts/paraflow","title":"Paraflow - A New Paradigm Language","description":"Paraflow is a programming language designed specifically for autonomy within the Paranet. It enables actors to plan, reason, and execute tasks autonomously, addressing limitations of conventional languages.","sidebar":"tutorialSidebar"},"paranet_concepts/paranet-concepts":{"id":"paranet_concepts/paranet-concepts","title":"Paranet Concepts","description":"The Paranet is an innovative Internet overlay designed to support distributed intelligence and autonomy, developed by Otonoma as outlined in \"Paranet: The Automation Platform for the Autonomous Internet\" by Jim Harding, February 2025. It represents a paradigm shift from traditional computing models, enabling a network of autonomous actors to collaborate, reason, and adapt in dynamic environments. This document introduces the core concepts that define the Paranet, providing a foundation for understanding its architecture, functionality, and potential impact.","sidebar":"tutorialSidebar"},"paranet_concepts/pdos":{"id":"paranet_concepts/pdos","title":"Paranet Distributed Actor Operating System","description":"The Paranet functions as a distributed operating system for autonomous actors, providing infrastructure for operation, communication, and collaboration.","sidebar":"tutorialSidebar"},"paranet_concepts/persistence":{"id":"paranet_concepts/persistence","title":"Persistence","description":"Persistence in the Paranet ensures continuity and recovery for actors and the network.","sidebar":"tutorialSidebar"},"paranet_concepts/pncp":{"id":"paranet_concepts/pncp","title":"Paranet Collaboration Protocol","description":"PnCP is the core protocol for actor communication and collaboration in the Paranet. It supports dynamic, skill-based interactions essential for distributed autonomy.","sidebar":"tutorialSidebar"},"paranet_concepts/security":{"id":"paranet_concepts/security","title":"Security","description":"Security in the Paranet is governed by Negative Trust Security (NTS), which assumes no inherent trust and continuously verifies behavior.","sidebar":"tutorialSidebar"},"paranet_concepts/skills":{"id":"paranet_concepts/skills","title":"Skill Definitions and Matching","description":"Skills in the Paranet represent capabilities that actors can offer or request. They are defined by a subject and action pair and are central to autonomous collaboration.","sidebar":"tutorialSidebar"}}}}