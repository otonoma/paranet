"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[122],{3511:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>d,contentTitle:()=>i,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>o});var a=s(4848),n=s(8453);const r={id:"variables",title:"Variables",sidebar_position:5},i="Variables",l={id:"paraflow/variables",title:"Variables",description:"Local variables are created with the let statement. Variable types are determined at runtime and include numbers, strings, and tables. In its simplest form, the let statement specifies the name of the variable and an expression for its value as in:",source:"@site/paranet/paraflow/variables.md",sourceDirName:"paraflow",slug:"/paraflow/variables",permalink:"/paraflow/variables",draft:!1,unlisted:!1,editUrl:"https://github.com/your-org/your-project/edit/main/paranet/paraflow/variables.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{id:"variables",title:"Variables",sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Top Level",permalink:"/paraflow/top-level"},next:{title:"Control Flow",permalink:"/paraflow/control_flow"}},d={},o=[{value:"Object Values",id:"object-values",level:2},{value:"Table Values",id:"table-values",level:2}];function c(e){const t={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,n.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"variables",children:"Variables"})}),"\n",(0,a.jsxs)(t.p,{children:["Local variables are created with the ",(0,a.jsx)(t.code,{children:"let"})," statement. Variable types are determined at runtime and include numbers, strings, and tables. In its simplest form, the ",(0,a.jsx)(t.code,{children:"let"})," statement specifies the name of the variable and an expression for its value as in:"]}),"\n",(0,a.jsx)(t.p,{children:'let $message = "Hello " + $requester;'}),"\n",(0,a.jsx)(t.h2,{id:"object-values",children:"Object Values"}),"\n",(0,a.jsxs)(t.p,{children:["However, the ",(0,a.jsx)(t.code,{children:"let"})," statement may also have more complex destructuring left-hand sides. Although variables cannot be objects, there are several places in Paraflow where object values may appear, and the destructuring ",(0,a.jsx)(t.code,{children:"let"})," statement enables those objects to be unpacked into scalar local variables."]}),"\n",(0,a.jsx)(t.p,{children:"One common place objects appear is in the response to a skill request. Skill requests that return data almost always return an object. Here\u2019s an example of a weather skill that returns current conditions as an object:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{children:"task !FetchWeather($ts) is\n  pncp let {\n    $humidity,\n    temperature_c: $temp,\n    wind: {\n      speed_km_hr: $wind_speed,\n      direction: $wind_dir\n    }\n  } = weather/current in {\n    insert weather($ts, $humidity, $temp, $wind_speed, $wind_dir);\n  }\n"})}),"\n",(0,a.jsxs)(t.p,{children:["The destructuring left-hand side describes how a possibly nested object is mapped to local variables. Each desired field of the source object has a binding that specifies where to store its value. For example, the response object in this example has a field named ",(0,a.jsx)(t.code,{children:"temperature_c"}),", and the binding indicates that the field's value should be assigned to the local variable ",(0,a.jsx)(t.code,{children:"$temp"}),". The ",(0,a.jsx)(t.code,{children:"$humidity"})," reference is just shorthand for ",(0,a.jsx)(t.code,{children:"humidity: $humidity"}),". The ",(0,a.jsx)(t.code,{children:"wind"})," field is a nested object, so its binding is an object that binds its fields to variables."]}),"\n",(0,a.jsx)(t.p,{children:"If this skill were to return the response:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{children:'{\n  "humidity": 67,\n  "temperature_c": 18,\n  "wind": {\n    "speed_km_hr": 12,\n    "Direction": "NNE"\n  }\n}\n'})}),"\n",(0,a.jsx)(t.p,{children:"Then the local variables would be:"}),"\n",(0,a.jsxs)(t.table,{children:[(0,a.jsx)(t.thead,{children:(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.th,{children:"Variable"}),(0,a.jsx)(t.th,{children:"Value"})]})}),(0,a.jsxs)(t.tbody,{children:[(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:"$humidity"}),(0,a.jsx)(t.td,{children:"67"})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:"$temp"}),(0,a.jsx)(t.td,{children:"18"})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:"$wind_speed"}),(0,a.jsx)(t.td,{children:"12"})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:"$wind_dir"}),(0,a.jsx)(t.td,{children:"NNE"})]})]})]}),"\n",(0,a.jsx)(t.h2,{id:"table-values",children:"Table Values"}),"\n",(0,a.jsx)(t.p,{children:"Local variables may also contain tables. See the Local tables section for a detailed description of local table variables."})]})}function h(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},8453:(e,t,s)=>{s.d(t,{R:()=>i,x:()=>l});var a=s(6540);const n={},r=a.createContext(n);function i(e){const t=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:i(e.components),a.createElement(r.Provider,{value:t},e.children)}}}]);