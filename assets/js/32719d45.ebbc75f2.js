"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[890],{7938:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>c});var t=a(4848),s=a(8453);const o={id:"language-basics",title:"Language Basics",sidebar_position:3},i="Language Basics",r={id:"paraflow/language-basics",title:"Language Basics",description:"Program Execution",source:"@site/paranet/paraflow/language_basics.md",sourceDirName:"paraflow",slug:"/paraflow/language-basics",permalink:"/paraflow/language-basics",draft:!1,unlisted:!1,editUrl:"https://github.com/your-org/your-project/edit/main/paranet/paraflow/language_basics.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{id:"language-basics",title:"Language Basics",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Hello World",permalink:"/paraflow/hello-world"},next:{title:"Top Level",permalink:"/paraflow/top-level"}},l={},c=[{value:"Program Execution",id:"program-execution",level:2},{value:"Goals",id:"goals",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"language-basics",children:"Language Basics"})}),"\n",(0,t.jsx)(n.h2,{id:"program-execution",children:"Program Execution"}),"\n",(0,t.jsx)(n.p,{children:"Decidedly different from most programming languages, Paraflow is a goal-driven language. Its execution consists of an interleaved sequence of the following activities:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Executing event handlers"}),": Instructions to handle external events."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Planning goals"}),": Creating a plan to achieve desired goals."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Executing planned tasks"}),": Instructions that accomplish an atomic goal."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"This sequence of activities may take place over milliseconds, hours, days, or even years. As such, there may not be a single instance of running code in memory or an OS process that performs all the activities of a single execution."}),"\n",(0,t.jsx)(n.p,{children:"A Paraflow instance is the execution sequence associated with a single root goal (i.e., a top-level goal that is not a sub-goal of any other goal). Root goals are created within an event handler and thus these event handlers can be considered the entry point."}),"\n",(0,t.jsx)(n.h2,{id:"goals",children:"Goals"}),"\n",(0,t.jsx)(n.p,{children:"A Paraflow goal represents a desired activity to perform. The activity may be parameterized by data. A goal instance consists of a name and zero or more specific parameter values. Here is an example goal:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"!SendMessage(template -> 5039883, recipient -> \u201cjoe@gmail.com\u201d)\n"})}),"\n",(0,t.jsx)(n.p,{children:"Goal names are always preceded by the ! symbol."}),"\n",(0,t.jsx)(n.p,{children:"Each goal instance has a state which typically progresses from Planned, to Active, to Complete. Once a goal instance has reached the Complete state, that goal is considered to be achieved; any subsequent requests to perform the same goal will not result in any further action because it has already been achieved."}),"\n",(0,t.jsx)(n.p,{children:"Goals to be achieved are created in two ways:"}),"\n",(0,t.jsx)(n.p,{children:"Event handlers may create new goals.\nRules describe how to decompose an existing goal into subgoals.\nBoth of these are described next."}),"\n",(0,t.jsx)(n.p,{children:"Handling Events - Events\nThe event construct defines what to do when some external event occurs, including a skill request from the Paranet. When the event is preceded by the skill annotation, it is automatically registered as a skill on the Paranet."}),"\n",(0,t.jsx)(n.p,{children:"Events have a name, a list of inputs, and a statement body. Here is an example of a typical event definition:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"%skill(subject=employee, action=onboard)\nevent newEmployeeOnboard($employee_id string) {\n  !OnboardEmployee($employee_id);\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"This defines an event named newEmployeeOnboard that is triggered by Paranet requests for the employee/onboard skill. The body of this event creates a new root goal named !OnboardEmployee. Once new goals are created, the Paraflow runtime begins the process of trying to fulfill the goal using rules and tasks described next."}),"\n",(0,t.jsx)(n.p,{children:'Goal Planning - Rules\nThe task and rule constructs of Paraflow are used to provide "recipes" for how to achieve goals that match a particular pattern. In the case of rules, they define how to decompose a high-level goal into sub-goals and any sequencing dependencies.'}),"\n",(0,t.jsx)(n.p,{children:"Rules have a goal pattern and statement body. The following example is what a rule might look like for the !OnboardEmployee goal described in the previous section."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"rule !OnboardEmployee($employee_id) {\n  !ProcessW2($employee_id),\n  !DoCorporateTraining($employee_id);\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"This rule matches !OnboardEmployee goals. The $employee_id variable in the goal pattern is bound to the actual value of the matched goal and is used in the statement body to create two new sub-goals which can be performed in parallel, indicated by the separating comma. Goal statements separated by a semicolon create sub-goals that must be performed sequentially."}),"\n",(0,t.jsx)(n.p,{children:"Goals that match rules are expanded recursively until no more rules match. The leaf goals of the expanded goal tree are the resulting actions to be performed, which are defined by tasks, described next."}),"\n",(0,t.jsx)(n.p,{children:"Achieving Goals - Tasks\nThe task construct defines how to perform a goal. This may be to take some action internally, or it could be to delegate the work to another actor via the Paranet. Just like rules, a task has a goal pattern and statement body. Here is an example of a task defined following our running example of employee onboarding:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'task !DoCorporateTraining($employee_id) {\n  let $template = Env("CORPORATE_TRAINING_TEMP");\n  pncp request employee/send_message($employee_id, $template);\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"This is an example where the task is simply delegated to another actor via the Paranet."}),"\n",(0,t.jsx)(n.p,{children:"Comments\nSingle-line comments begin with the % symbol and may appear anywhere where whitespace is acceptable. For example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"% This is my main task\n!go($uid) {\n  with item_detail(id == $uid) { % always exactly one row\n  }\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"Variables\nLocal variables may be used in any statement block, including the body of events, rules, and tasks. Variable declarations begin with the keyword let followed by the variable name, which must begin with the $ symbol, an initial value, and a terminating semicolon. For example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"let $y = 5 * $x;\n"})}),"\n",(0,t.jsx)(n.p,{children:"Literals\nThe following types of fixed values may be used:"}),"\n",(0,t.jsx)(n.p,{children:'Strings: These must be enclosed in double quotes: "Hello"\nWhole numbers: A sequence of digits: 594\nDecimal numbers: A sequence of digits, decimal point, and second sequence of digits: 2.39\nTime duration: A sequence of digits followed by a unit (ms, sec, min, hr, hour, hours, day, days): 1 min'})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>i,x:()=>r});var t=a(6540);const s={},o=t.createContext(s);function i(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);